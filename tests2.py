import json
import matplotlib.pyplot as plt
data3 = [
    [56, 52, 5],
    [56, 51, 7],
    [56, 50, 9],
    [56, 49, 11],
    [56, 47, 14],
    [56, 45, 17],
    [56, 44, 19],
    [56, 42, 22],
    [56, 41, 24],
    [56, 40, 26],
    [56, 39, 28],
    [56, 37, 29],
    [56, 35, 30],
    [56, 34, 31],
    [56, 32, 32],
    [52, 52, 37],
    [50, 50, 35],
    [47, 47, 33],
    [46, 46, 32],
    [43, 43, 30],
    [41, 41, 29],
    [38, 38, 27],
    [36, 36, 25],
    [33, 33, 23],
    [31, 31, 21],
    [29, 29, 20],
    [26, 26, 18],
    [23, 23, 16],
    [22, 22, 15],
    [19, 19, 13],
    [17, 17, 12],
    [14, 14, 10],
    [12, 12, 8],
    [9, 9, 6],
    [7, 7, 4],
    [5, 5, 3],
    [2, 2, 1],
    [1, 0, 0],
    [2, 1, 0],
    [3, 2, 0],
    [3, 1, 1],
    [4, 3, 0],
    [4, 2, 2],
    [5, 4, 0],
    [5, 3, 2],
    [6, 5, 0],
    [6, 4, 2],
    [6, 3, 3],
    [7, 6, 0],
    [7, 5, 2],
    [7, 4, 3],
    [8, 7, 0],
    [8, 6, 2],
    [8, 4, 4],
    [9, 8, 0],
    [9, 7, 2],
    [9, 6, 5],
    [9, 5, 4],
    [10, 9, 0],
    [10, 8, 2],
    [10, 6, 4],
    [10, 5, 5],
    [11, 10, 0],
    [11, 9, 2],
    [11, 7, 5],
    [11, 6, 6],
    [12, 11, 0],
    [12, 10, 2],
    [12, 9, 7],
    [12, 8, 5],
    [12, 7, 6],
    [13, 12, 0],
    [13, 11, 2],
    [13, 9, 5],
    [13, 8, 6],
    [13, 7, 7],
    [14, 13, 0],
    [14, 12, 2],
    [14, 11, 9],
    [14, 10, 5],
    [14, 9, 8],
    [14, 8, 7],
    [15, 14, 0],
    [15, 13, 2],
    [15, 11, 5],
    [15, 10, 7],
    [15, 8, 8],
    [16, 15, 0],
    [16, 14, 2],
    [16, 12, 5],
    [16, 11, 7],
    [16, 10, 8],
    [16, 9, 9],
    [17, 16, 0],
    [17, 15, 2],
    [17, 14, 11],
    [17, 13, 5],
    [17, 12, 7],
    [17, 11, 8],
    [17, 10, 9],
    [18, 17, 0],
    [18, 16, 2],
    [18, 14, 5],
    [18, 13, 7],
    [18, 12, 9],
    [18, 10, 10],
    [19, 18, 0],
    [19, 17, 2],
    [19, 16, 12],
    [19, 15, 5],
    [19, 14, 7],
    [19, 13, 9],
    [19, 12, 11],
    [19, 11, 10],
    [20, 19, 0],
    [20, 18, 2],
    [20, 16, 5],
    [20, 15, 7],
    [20, 14, 9],
    [20, 12, 10],
    [20, 11, 11],
    [21, 20, 0],
    [21, 19, 2],
    [21, 18, 11],
    [21, 17, 5],
    [21, 16, 7],
    [21, 15, 9],
    [21, 13, 10],
    [21, 12, 12],
    [22, 21, 0],
    [22, 20, 2],
    [22, 19, 14],
    [22, 18, 5],
    [22, 17, 7],
    [22, 16, 9],
    [22, 15, 13],
    [22, 14, 12],
    [22, 13, 11],
    [23, 22, 0],
    [23, 21, 2],
    [23, 20, 15],
    [23, 19, 5],
    [23, 18, 7],
    [23, 17, 9],
    [23, 16, 14],
    [23, 15, 11],
    [23, 14, 13],
    [23, 13, 12],
    [24, 23, 0],
    [24, 22, 2],
    [24, 20, 5],
    [24, 19, 7],
    [24, 18, 9],
    [24, 16, 11],
    [24, 15, 12],
    [24, 13, 13],
    [25, 24, 0],
    [25, 23, 2],
    [25, 21, 5],
    [25, 20, 7],
    [25, 19, 9],
    [25, 17, 11],
    [25, 16, 13],
    [25, 14, 14],
    [26, 25, 0],
    [26, 24, 2],
    [26, 23, 17],
    [26, 22, 5],
    [26, 21, 7],
    [26, 20, 9],
    [26, 19, 11],
    [26, 18, 16],
    [26, 17, 13],
    [26, 16, 15],
    [26, 15, 14],
    [27, 26, 0],
    [27, 25, 2],
    [27, 23, 5],
    [27, 22, 7],
    [27, 21, 9],
    [27, 20, 11],
    [27, 18, 13],
    [27, 17, 14],
    [27, 15, 15],
    [28, 27, 0],
    [28, 26, 2],
    [28, 24, 5],
    [28, 23, 7],
    [28, 22, 9],
    [28, 21, 11],
    [28, 18, 14],
    [28, 17, 15],
    [28, 16, 16],
    [29, 28, 0],
    [29, 27, 2],
    [29, 26, 19],
    [29, 25, 5],
    [29, 24, 7],
    [29, 23, 9],
    [29, 22, 11],
    [29, 21, 18],
    [29, 20, 14],
    [29, 19, 17],
    [29, 18, 15],
    [29, 17, 16],
    [30, 29, 0],
    [30, 28, 2],
    [30, 26, 5],
    [30, 25, 7],
    [30, 24, 9],
    [30, 23, 11],
    [30, 21, 14],
    [30, 20, 16],
    [30, 19, 15],
    [30, 17, 17],
    [31, 30, 0],
    [31, 29, 2],
    [31, 28, 20],
    [31, 27, 5],
    [31, 26, 7],
    [31, 25, 9],
    [31, 24, 11],
    [31, 23, 19],
    [31, 22, 14],
    [31, 21, 15],
    [31, 20, 18],
    [31, 19, 16],
    [31, 18, 17],
    [32, 31, 0],
    [32, 30, 2],
    [32, 28, 5],
    [32, 27, 7],
    [32, 26, 9],
    [32, 25, 11],
    [32, 23, 14],
    [32, 21, 16],
    [32, 20, 17],
    [32, 18, 18],
    [33, 32, 0],
    [33, 31, 2],
    [33, 30, 22],
    [33, 29, 5],
    [33, 28, 7],
    [33, 27, 9],
    [33, 26, 11],
    [33, 25, 21],
    [33, 24, 14],
    [33, 23, 20],
    [33, 22, 16],
    [33, 21, 17],
    [33, 20, 19],
    [33, 19, 18],
    [34, 33, 0],
    [34, 32, 2],
    [34, 30, 5],
    [34, 29, 7],
    [34, 28, 9],
    [34, 27, 11],
    [34, 25, 14],
    [34, 23, 18],
    [34, 22, 17],
    [34, 19, 19],
    [35, 34, 0],
    [35, 33, 2],
    [35, 31, 5],
    [35, 30, 7],
    [35, 29, 9],
    [35, 28, 11],
    [35, 26, 14],
    [35, 24, 17],
    [35, 22, 18],
    [35, 21, 19],
    [35, 20, 20],
    [36, 35, 0],
    [36, 34, 2],
    [36, 33, 24],
    [36, 32, 5],
    [36, 31, 7],
    [36, 30, 9],
    [36, 29, 11],
    [36, 28, 23],
    [36, 27, 14],
    [36, 26, 22],
    [36, 25, 17],
    [36, 24, 18],
    [36, 23, 21],
    [36, 22, 19],
    [36, 21, 20],
    [37, 36, 0],
    [37, 35, 2],
    [37, 33, 5],
    [37, 32, 7],
    [37, 31, 9],
    [37, 30, 11],
    [37, 28, 14],
    [37, 26, 17],
    [37, 25, 18],
    [37, 24, 19],
    [37, 22, 20],
    [37, 21, 21],
    [38, 37, 0],
    [38, 36, 2],
    [38, 35, 26],
    [38, 34, 5],
    [38, 33, 7],
    [38, 32, 9],
    [38, 31, 11],
    [38, 30, 25],
    [38, 29, 14],
    [38, 28, 24],
    [38, 27, 17],
    [38, 26, 23],
    [38, 25, 19],
    [38, 24, 20],
    [38, 23, 22],
    [38, 22, 21],
    [39, 38, 0],
    [39, 37, 2],
    [39, 35, 5],
    [39, 34, 7],
    [39, 33, 9],
    [39, 32, 11],
    [39, 30, 14],
    [39, 28, 17],
    [39, 27, 19],
    [39, 25, 20],
    [39, 24, 21],
    [39, 22, 22],
    [40, 39, 0],
    [40, 38, 2],
    [40, 36, 5],
    [40, 35, 7],
    [40, 34, 9],
    [40, 33, 11],
    [40, 31, 14],
    [40, 29, 17],
    [40, 28, 19],
    [40, 27, 21],
    [40, 26, 20],
    [40, 24, 22],
    [40, 23, 23],
    [41, 40, 0],
    [41, 39, 2],
    [41, 38, 28],
    [41, 37, 5],
    [41, 36, 7],
    [41, 35, 9],
    [41, 34, 11],
    [41, 33, 26],
    [41, 32, 14],
    [41, 31, 24],
    [41, 30, 17],
    [41, 29, 19],
    [41, 28, 25],
    [41, 27, 20],
    [41, 26, 21],
    [41, 25, 22],
    [41, 24, 23],
    [42, 41, 0],
    [42, 40, 2],
    [42, 38, 5],
    [42, 37, 7],
    [42, 36, 9],
    [42, 35, 11],
    [42, 33, 14],
    [42, 31, 17],
    [42, 30, 19],
    [42, 28, 21],
    [42, 27, 22],
    [42, 25, 23],
    [42, 24, 24],
    [43, 42, 0],
    [43, 41, 2],
    [43, 40, 29],
    [43, 39, 5],
    [43, 38, 7],
    [43, 37, 9],
    [43, 36, 11],
    [43, 35, 28],
    [43, 34, 14],
    [43, 33, 27],
    [43, 32, 17],
    [43, 31, 19],
    [43, 30, 26],
    [43, 29, 21],
    [43, 28, 22],
    [43, 27, 23],
    [43, 26, 25],
    [43, 25, 24],
    [44, 43, 0],
    [44, 42, 2],
    [44, 40, 5],
    [44, 39, 7],
    [44, 38, 9],
    [44, 37, 11],
    [44, 35, 14],
    [44, 33, 17],
    [44, 32, 19],
    [44, 31, 23],
    [44, 30, 21],
    [44, 29, 22],
    [44, 26, 24],
    [44, 25, 25],
    [45, 44, 0],
    [45, 43, 2],
    [45, 41, 5],
    [45, 40, 7],
    [45, 39, 9],
    [45, 38, 11],
    [45, 36, 14],
    [45, 34, 17],
    [45, 33, 19],
    [45, 32, 25],
    [45, 31, 22],
    [45, 29, 23],
    [45, 27, 24],
    [45, 26, 26],
    [46, 45, 0],
    [46, 44, 2],
    [46, 43, 31],
    [46, 42, 5],
    [46, 41, 7],
    [46, 40, 9],
    [46, 39, 11],
    [46, 38, 30],
    [46, 37, 14],
    [46, 36, 29],
    [46, 35, 17],
    [46, 34, 19],
    [46, 33, 28],
    [46, 32, 22],
    [46, 31, 27],
    [46, 30, 23],
    [46, 29, 24],
    [46, 28, 26],
    [46, 27, 25],
    [47, 46, 0],
    [47, 45, 2],
    [47, 44, 32],
    [47, 43, 5],
    [47, 42, 7],
    [47, 41, 9],
    [47, 40, 11],
    [47, 39, 31],
    [47, 38, 14],
    [47, 37, 30],
    [47, 36, 17],
    [47, 35, 19],
    [47, 34, 29],
    [47, 33, 22],
    [47, 32, 23],
    [47, 31, 28],
    [47, 30, 24],
    [47, 29, 25],
    [47, 28, 27],
    [47, 27, 26],
    [48, 47, 0],
    [48, 46, 2],
    [48, 44, 5],
    [48, 43, 7],
    [48, 42, 9],
    [48, 41, 11],
    [48, 39, 14],
    [48, 37, 17],
    [48, 36, 19],
    [48, 34, 22],
    [48, 32, 24],
    [48, 31, 25],
    [48, 29, 26],
    [48, 27, 27],
    [49, 48, 0],
    [49, 47, 2],
    [49, 45, 5],
    [49, 44, 7],
    [49, 43, 9],
    [49, 42, 11],
    [49, 40, 14],
    [49, 38, 17],
    [49, 37, 19],
    [49, 35, 22],
    [49, 34, 24],
    [49, 33, 25],
    [49, 31, 26],
    [49, 29, 27],
    [49, 28, 28],
    [50, 49, 0],
    [50, 48, 2],
    [50, 47, 34],
    [50, 46, 5],
    [50, 45, 7],
    [50, 44, 9],
    [50, 43, 11],
    [50, 42, 33],
    [50, 41, 14],
    [50, 40, 32],
    [50, 39, 17],
    [50, 38, 19],
    [50, 37, 31],
    [50, 36, 22],
    [50, 35, 24],
    [50, 34, 25],
    [50, 33, 30],
    [50, 32, 26],
    [50, 31, 29],
    [50, 30, 27],
    [50, 29, 28],
    [51, 50, 0],
    [51, 49, 2],
    [51, 47, 5],
    [51, 46, 7],
    [51, 45, 9],
    [51, 44, 11],
    [51, 42, 14],
    [51, 40, 17],
    [51, 39, 19],
    [51, 37, 22],
    [51, 36, 24],
    [51, 35, 25],
    [51, 34, 26],
    [51, 32, 27],
    [51, 30, 28],
    [51, 29, 29],
    [52, 51, 0],
    [52, 50, 2],
    [52, 49, 36],
    [52, 48, 5],
    [52, 47, 7],
    [52, 46, 9],
    [52, 45, 11],
    [52, 44, 35],
    [52, 43, 14],
    [52, 42, 34],
    [52, 41, 17],
    [52, 40, 19],
    [52, 39, 33],
    [52, 38, 22],
    [52, 37, 24],
    [52, 36, 26],
    [52, 35, 32],
    [52, 34, 27],
    [52, 33, 31],
    [52, 32, 28],
    [52, 31, 30],
    [52, 30, 29],
    [53, 52, 0],
    [53, 51, 2],
    [53, 49, 5],
    [53, 48, 7],
    [53, 47, 9],
    [53, 46, 11],
    [53, 44, 14],
    [53, 42, 17],
    [53, 41, 19],
    [53, 39, 22],
    [53, 38, 24],
    [53, 37, 26],
    [53, 35, 27],
    [53, 34, 28],
    [53, 32, 29],
    [53, 30, 30],
    [54, 53, 0],
    [54, 52, 2],
    [54, 50, 5],
    [54, 49, 7],
    [54, 48, 9],
    [54, 47, 11],
    [54, 45, 14],
    [54, 43, 17],
    [54, 42, 19],
    [54, 40, 22],
    [54, 39, 24],
    [54, 38, 26],
    [54, 37, 28],
    [54, 36, 27],
    [54, 33, 29],
    [54, 32, 30],
    [54, 31, 31],
    [55, 53, 2],
    [55, 52, 38],
    [55, 51, 5],
    [55, 50, 7],
    [55, 49, 9],
    [55, 48, 11],
    [55, 47, 36],
    [55, 46, 14],
    [55, 45, 34],
    [55, 44, 17],
    [55, 43, 19],
    [55, 42, 35],
    [55, 41, 22],
    [55, 40, 24],
    [55, 39, 26],
    [55, 38, 33],
    [55, 37, 27],
    [55, 36, 28],
    [55, 35, 29],
    [55, 34, 30],
    [55, 33, 32],
    [55, 32, 31],
    [56, 54, 2],
    [55, 54, 0],
    [56, 55, 0],
    [55, 55, 39]
]
def load(fileName):
	with open(fileName, "r") as file:
		jData = file.read()
		data = json.loads(jData)

		return data
data4Dict = load("./4xN.json")
data4 = []
for key in data4Dict.keys():
    if data4Dict[key][1]%2 == 0 and data4Dict[key][0][-1] != 0:
        data4.append(data4Dict[key][0])
# print(data4)
print("laoded")
# sums = set([])
# for x in data:
#     s = sum(x)
#     sums.add(s)
# print(sums)

# for i in range(5):
#     for j in range(i+1):
#         for k in range(j+1):
#             #2x2 = (i,j)
#             wasOne = False
#             for x in data4:
#                 if x[0] - i == x[3] and x[1] - j == x[3] and x[2] - k == x[3] and x[3] != 0:
#                     # print("(i,j,k): (" + str(i)+"," +str(j) + ","+str(k)+")\tx: " + str(x))
#                     wasOne = True
#                     break
#             if not wasOne:
#                 print("No x for ("+str(i)+","+str(j)+ ","+str(k)+")")

evens3x = {}
evens3y = {}
evens3z = {}
for node in data3:
    if node[2] == 0:
        continue
    if node[0] in evens3x.keys():
        evens3x[node[0]].append(node)
    else:
        evens3x[node[0]] = [node]

    if node[1] in evens3y.keys():
        evens3y[node[1]].append(node)
    else:
        evens3y[node[1]] = [node]

    if node[2] in evens3z.keys():
        evens3z[node[2]].append(node)
    else:
        evens3z[node[2]] = [node]
# print(evens3.keys())
prevs = 0
for i in range(2,50):
    # print("evens3z["+str(i)+"]: " + str(len(evens3z[i])))
    s = 0
    for key in range(2,i+1):
        s += len(evens3y[key])
    print("3x"+str(i)+" evensy: " + str(s)+"\tdiff: " + str(s-prevs))
    prevs = s


            if x[0] - i == x[2] and x[1] - (j) == x[2] and x[2] != 0:
                print("(i,j): (" + str(i)+"," +str(j) + ")\tz: " + str(x[2])+"\tx: " + str(x))
                wasOne = True
        if not wasOne:
            print("No x for ("+str(i)+","+str(j)+")")
from mpl_toolkits.mplot3d import Axes3D
def project(v, normal):
    # dotProd = v[0]*normal[0]+v[1]*normal[1]+v[2]*normal[2]
    # p2 = (v[0]-(dotProd*normal[0]), v[1]-(dotProd*normal[1]), v[2]-(dotProd*normal[2]))
    # return p2
    x = v[0]
    y = v[1]
    z = v[2]
    new = (x-z,y-z,z-z)
    return new

def project3(data):
    newPs = []
    x = []
    y = []
    z = []
    for point in data:
        k = 125
        if point[-1] == 0 or point[0] > k or point[1] > k:
            continue
        # p = project(point, (1,1,1))
        # print("point: " + str(point)+"\tp: " + str(p))
        p = point
        newPs.append(p)
        x.append(p[0])
        y.append(p[1])
        z.append(p[2])
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')
    # ax = fig.add_subplot(111)
    ax.scatter(x,y,z)
    ax.set_xlabel('X Label')
    ax.set_ylabel('Y Label')

    for i in range(len(x)):
        ax.annotate(str(x[i])+","+str(y[i]), (x[i], y[i]))

    ax.set_zlabel('Z Label')
    plt.show()
# def project2(v, normal):
#     # dotProd = v[0]*normal[0]+v[1]*normal[1]+v[2]*normal[2]
#     # p2 = (v[0]-(dotProd*normal[0]), v[1]-(dotProd*normal[1]), v[2]-(dotProd*normal[2]))
#     # return p2
#     x = v[0]
#     y = v[1]
#     z = v[2]
#     new = (x-z,y-z,z-z)
#     return new

def project4(data):
    newPs = []
    xs = []
    ys = []
    zs = []
    for point in data:
        k = 125
        if point[-1] == 0 or point[0] > k or point[1] > k:
            continue
        v = point
        x = v[0]
        y = v[1]
        z = v[2]
        w = v[3]
        new = [x-w,y-w,z-w]
        # p = project(point, (1,1,1))
        # print("point: " + str(point)+"\tp: " + str(p))
        p = new
        newPs.append(p)
    # project3(newPs)
        xs.append(p[0])
        ys.append(p[1])
        zs.append(p[2])
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')
    # ax = fig.add_subplot(111)
    ax.scatter(xs,ys,zs)
    ax.set_xlabel('X Axis')
    ax.set_ylabel('Y Axis')
    ax.set_zlabel('Z Axis')


    # for i in range(len(xs)):
    #     ax.annotate(str(xs[i])+","+str(ys[i])+","+str(zs[i]), (xs[i], ys[i]), zs[i])

    # ax.set_zlabel('Z Label')
    plt.show()
# project4(data4)
# project3(data3)
